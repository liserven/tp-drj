<?php
/**
 * Created by PhpStorm.
 * User: 李沈阳
 * Date: 2017/11/22
 * Time: 9:27
 */

namespace app\admin\controller;


use app\common\model\BuildingCustomer;
use app\common\model\BuildingDetails;
use app\common\model\BuildingImg;
use app\common\model\BuildingScreen;
use app\common\model\BuildingSet;
use app\common\validate\IDMustBePositiveInt;
use app\lib\exception\ParameterException;
use custom\CusLog;
use think\Db;


class Building extends Base
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $deploy = db('deploy')->where('type', 2)->select();
        $this->assign('deploy', $deploy);

    }


    //建材列表
    public function tolist()
    {

        $page = Db::table('building_details')->where('status','1')->order('id','DESC')->paginate('10');

        $this->assign('page', $page);

        return $this->fetch();

    }

    //建材添加
    public function doAdd()
    {

        if ($this->request->isPost()) {
            if (!$this->_checkAction()) {
                return $this->ajaxShow(false, '无权此操作');
            }

            $Deploy = input('like/a');

            $BsetOp = input('set_name/a');
            $BsetOd = input('set/a');


            $screenImg = input('img/a'); //图片
            $screenSize = input('size/a');  //规格
            $screenStock = input('stock/a'); //库存
            $screenPrice = input('price/a'); //价格

            $zsImg = input('zs-input/a'); //展示图片
            $lbImg = input('lb-input/a'); //列表图片

            if (empty($screenSize)) {
                throw new ParameterException([
                    'msg' => '商品必须有一个规格',
                ]);
            }
            $data['order'] = input('order');
            $data['g_img'] = input('g_img');
            $data['g_name'] = input('g_name');//商品名称
            $data['g_price'] = input('g_price');//商品价格
            $data['g_price_r'] = input('g_price_r');//商品价格
            $data['g_columr'] = input('quiz2');
            $data['g_column'] = input('quiz1');


            //$data['g_price_r']  = input('g_price_r');//商品折后价格
            // $data['name']    = input('name');//商品分类名称

            $data['g_material'] = input('g_material');


            try {
                $result = BuildingDetails::create($data);

                $screenData = [];
                $imgsData = [];
                $imgssData = [];
                $setData = [];
                $deplData = [];

                //遍历建材规格
                if (is_array($screenSize) && !empty($screenSize)) {
                    foreach ($screenSize as $k => $val) {

                        $screenData[$k]['img'] = $screenImg[$k];
                        $screenData[$k]['size'] = $val;
                        $screenData[$k]['gid'] = $result['id'];
                        $screenData[$k]['stock'] = $screenStock[$k] ? $screenStock[$k] : 999;
                        $screenData[$k]['price'] = $screenPrice[$k] ? $screenPrice[$k] : $result['g_price'];
                        $screenData[$k]['g_name'] = $data['g_name'];
                    }
                }
                //遍历建材列表图片
                if (is_array($lbImg) && !empty($lbImg)) {
                    foreach ($lbImg as $k => $val) {

                        $imgsData[$k]['g_img'] = $val;
                        $imgsData[$k]['g_id'] = $result['id'];
                        $imgsData[$k]['g_img_type'] = 1;
                    }
                }
                //遍历建材展示图片
                if (is_array($zsImg) && !empty($zsImg)) {
                    foreach ($lbImg as $k => $val) {

                        $imgssData[$k]['g_img'] = $val;
                        $imgssData[$k]['g_id'] = $result['id'];
                        $imgssData[$k]['g_img_type'] = 2;
                    }
                }
                //合并展示与列表图
                $imgsData = array_merge_recursive($imgsData, $imgssData);

                //遍历建材补充选项
                if (is_array($BsetOp) && !empty($BsetOp)) {
                    foreach ($BsetOp as $k => $val) {
                        $setData[$k]['gid'] = $result['id'];
                        $setData[$k]['set_name'] = $val;
                        foreach ($BsetOd as $k => $val) {
                            $setData[$k]['value'] = $val;
                        }

                    }
                }
                //遍历商品售后服务
                if (is_array($Deploy) && !empty($Deploy)) {
                    foreach ($Deploy as $k => $val) {
                        $deplData[$k]['gid'] = $result['id'];
                        $list = db('deploy')->where('id', $val)->find();
                        $deplData[$k]['cus_name'] = $list['name'];

                        $deplData[$k]['img'] = $list['img'];
                    }
                }

                (new BuildingCustomer())->saveAll($deplData);
                (new BuildingSet())->saveAll($setData);

                (new BuildingImg())->saveAll($imgsData);
                (new BuildingScreen())->saveAll($screenData);
                return $this->resultHandle($result);

            } catch (\Exception $e) {
                return show(false, $e->getMessage());
            }
        } else {

            $province = db('building_column')->where('pid', 0)->select();
            $two = db('building_column')->where('pid', $province[0]['id'])->select();
            $this->assign([
                'province' => $province,
                'two' => $two,
            ]);

            return $this->fetch();
        }
    }

    public function doEdit()
    {

        if ($this->request->isPost()) {
            if (!$this->_checkAction()) {
                return $this->ajaxShow(false, '无权此操作');
            }

            $data['g_name'] = input('g_name');
            $data['g_price'] = input('g_price');//商品价格
            $data['g_price_r'] = input('g_price_r');//商品折后价格
            $data['g_column'] = input('g_column');//商品一级分类
            $data['g_columr'] = input('g_columr');//商品二级分类
            $data['g_material'] = input('g_material');//商品材质
            $data['id'] = input('id');

            $Deploy = input('deploy/a'); //售后服务

            $BsetOp = input('set_name/a');
            $BsetOd = input('set/a');


            $screenImg = input('img/a'); //图片
            $screenSize = input('size/a');  //规格
            $screenStock = input('stock/a'); //库存
            $screenPrice = input('price/a'); //价格

            $zsImg = input('zs-input/a'); //展示图片
            $lbImg = input('lb-input/a'); //列表图片

            if (empty($screenSize)) {
                throw new ParameterException([
                    'msg' => '商品必须有一个规格',
                ]);
            }
            $screenData = [];
            $imgsData = [];
            $imgssData = [];
            $setData = [];
            $deplData = [];

            Db::startTrans();
            try {

                Db::table('building_img')->where(['g_id'=> $data['id']])->delete();//删除商品之前所存图片
                Db::table('building_screen')->where(['gid'=> $data['id']])->delete();//删除商品之前所存规格
                Db::table('building_set')->where(['gid'=> $data['id']])->delete();//删除商品之前所存选项
                Db::table('building_customer')->where(['gid'=> $data['id']])->delete();//删除商品之前所存售后




                //遍历建材规格
                if (is_array($screenSize) && !empty($screenSize)) {
                    foreach ($screenSize as $k => $val) {

                        $screenData[$k]['img'] = $screenImg[$k];
                        $screenData[$k]['size'] = $val;
                        $screenData[$k]['gid'] = $data['id'];
                        $screenData[$k]['stock'] = $screenStock[$k] ? $screenStock[$k] : 999;
                        $screenData[$k]['price'] = $screenPrice[$k] ? $screenPrice[$k] : $data['g_price'];
                        $screenData[$k]['g_name'] = $data['g_name'];
                    }
                }
                //遍历建材列表图片
                if (is_array($lbImg) && !empty($lbImg)) {
                    foreach ($lbImg as $k => $val) {

                        $imgsData[$k]['g_img'] = $val;
                        $imgsData[$k]['g_id'] = $data['id'];
                        $imgsData[$k]['g_img_type'] = 1;
                    }
                }
                //遍历建材展示图片
                if (is_array($zsImg) && !empty($zsImg)) {
                    foreach ($lbImg as $k => $val) {

                        $imgssData[$k]['g_img'] = $val;
                        $imgssData[$k]['g_id'] = $data['id'];
                        $imgssData[$k]['g_img_type'] = 2;
                    }
                }
                //合并展示与列表图
                $imgsData = array_merge_recursive($imgsData, $imgssData);

                //遍历建材补充选项
                if (is_array($BsetOp) && !empty($BsetOp)) {
                    foreach ($BsetOp as $k => $val) {
                        $setData[$k]['gid'] = $data['id'];
                        $setData[$k]['set_name'] = $val;
                        foreach ($BsetOd as $k => $val) {
                            $setData[$k]['value'] = $val;
                        }

                    }
                }
                //遍历商品售后服务
                if (is_array($Deploy) && !empty($Deploy)) {
                    foreach ($Deploy as $k => $val) {
                        $deplData[$k]['gid'] = $data['id'];
                        $list = db('deploy')->where('id', $val)->find();
                        $deplData[$k]['cus_name'] = $list['name'];

                        $deplData[$k]['img'] = $list['img'];
                    }
                }

                (new BuildingCustomer())->saveAll($deplData);//保存商品售后
                (new BuildingSet())->saveAll($setData);//保存商品单独选项

                (new BuildingImg())->saveAll($imgsData);//保存商品图片
                (new BuildingScreen())->saveAll($screenData);//保存商品规格


                BuildingDetails::update($data);
                Db::commit();
                return show(true, 'ok', []);

            } catch (\Exception $e) {
                Db::rollback();
                return show(false, $e->getMessage(), []);
            }
        } else {
            (new IDMustBePositiveInt())->goCheck();
            $id = input('id/d');
            $data = BuildingDetails::get(['id' => $id]);  //商品详情
            $screen = db('building_screen')->where(['gid' => $id])->select(); //商品规格
            $one = db('building_column')->where('pid', 0)->select();  //商品栏目
            $deploys = db('deploy')->where('type', 2)->select(); //售后服务
            $img = Db::table('building_img')->where(['g_id' => $id])->select(); //商品图片
            $set = Db::table('building_set')->where(['gid' => $id])->select();
            $deploys = array_column($deploys, 'id');
            $this->assign([
                'one' => $one,
                'deploys' => $deploys,
                'data' => $data,
                'screen' => $screen,
                'img' => $img,
                'set' => $set
            ]);

            return $this->fetch();
        }
    }

    //删除
    public function doDel($id)
    {
        (new IDMustBePositiveInt())->goCheck();
        $data = BuildingDetails::get(['id' => $id]);
        if (!$data) {
            throw new ParameterException();
        }
        Db::startTrans();
        try {
            $result = $data->delete();
            CusLog::writeLog($this->User['am_id'], '删除了 <a class="c-red">' . $data->id . '</a>');
            Db::commit();
            return $this->resultHandle($result);
        } catch (\Exception $e) {
            Db::rollback();
            return show(false, $e->getMessage());
        }
    }

    //查询
    public function lookup()
    {
        $name = input('name');
        $list = db('building_details')->where('g_name', $name)->find();
        $this->assign('list', $list);
        return $this->fetch();
    }

    //下架列表

    public function unbuilding()
    {
        $list = db('building_details')->where('status', '2')->paginate('15');
        $this->assign('page', $list);
        return $this->fetch();
    }


    //下架
    public function changes($id){
        (new IDMustBePositiveInt())->goCheck();


        $page = db('building_details')->where('id',$id)->setField('status','2');


        return $this->resultHandle($page);
    }


    //上架
    public function regain($id){
        (new IDMustBePositiveInt())->goCheck();


        $page = db('building_details')->where('id',$id)->setField('status','1');

        return $this->resultHandle($page);
    }
  //删除图片
    public function doImgDel($id)
    {
        (new IDMustBePositiveInt())->goCheck();


        return $this->resultHandle(Db::table('building_img')->where(['id' => $id])->delete());


    }








}
