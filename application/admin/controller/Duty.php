<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/9/19
 * Time: 8:55
 */

namespace app\admin\controller;


use app\common\model\ActionData;
use app\common\model\AdminDuty;
use app\common\model\DutyAction;
use app\common\model\DutyData;
use app\common\model\DUtyModular;
use app\common\model\InformationSort;
use app\common\validate\DutyValidate;
use app\common\validate\IDMustBePositiveInt;
use app\lib\exception\ParameterException;
use custom\CusLog;
use think\Db;

/**
 * Class Duty
 * @package app\admin\controller
 * 职责控制器
 */
class Duty extends Base
{

    //初始化父类方法
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $actionPidList = ActionData::findByPageList(['ad_pid' => 0]); //查询所有一级分类
        //查询所有分类 提供选择模块
        $this->assign('actionPidList', $actionPidList);
    }


    /**
     * @url admin\Duty\toList
     *职责列表页
     */
    public function toList()
    {
        $where['dd_name'] = input('seach') ? input('seach') : '';
        $dutyList = DutyData::findByPage($where);
        $this->assign('page', $dutyList);
        return $this->fetch();
    }

    //角色所有用户
    public function getDetail($id)
    {
        (new IDMustBePositiveInt())->goCheck();

        $membersList = AdminDuty::getMemberListByDutyId($id);

        $this->assign('memberList', $membersList);

        return $this->fetch();


    }

    /**
     * @url admin\Duty\doAdd
     *职责添加方法
     */
    public function doAdd()
    {
        if ($this->request->isPost()) {
            if (!$this->_checkAction()) {
                return $this->ajaxShow(false, '无权此操作');
            }
            //组合数据
            $data['dd_name'] = input('topic');
            $data['dd_describe'] = input('describe');
            $data['dd_status'] = input('status');
            $actionList = input('actions/a');

            if( empty($actionList) )
            {
                throw new ParameterException([
                    'msg' => '不可添加无权限角色'
                ]);
            }
            //验证数据
            (new DutyValidate())->goCheck($data);
            //查询该角色是否已经存在
            $findTopic = DutyData::getDutyFind(['dd_name' => $data['dd_name']]);
            if (!$findTopic) {
                //如果不存在就添加
                Db::startTrans(); //开启事物
                try {
                    //添加数据
                    $DutyResult = DutyData::create($data);
                    $actionData = [];
                    //组合所有行为数据
                    foreach ($actionList as $key => $val) {
                        $actionData[$key]['da_duty_id'] = $DutyResult->dd_id;
                        $actionData[$key]['da_action_id'] = $val;
                    }
                    $ActionResult = model('DutyAction')->saveAll($actionData);
                    Db::commit(); //提交事物
                    //返回结果
                    if ($DutyResult && $ActionResult) {
                        //如果都添加成功
                        CusLog::writeLog($this->User['am_id'], '添加角色');
                        return $this->ajaxShow(true, '添加成功');

                    } else {
                        return $this->ajaxShow(false, '添加失败');
                    }

                } catch (\Exception $e) {
                    Db::rollback(); //如果失败回滚事物
                    return $this->ajaxShow(false, $e->getMessage());
                }
            } else {
                return $this->ajaxShow(false, '该角色已经存在');
            }
        } else {
            return $this->fetch();
        }
    }

    /**
     * @url admin\Duty\doEdit
     *职责修改方法
     */
    public function doEdit()
    {
        if ($this->request->isPost()) {
            if (!$this->_checkAction()) {
                return $this->ajaxShow(false, '无权此操作');
            }
            //组合数据
            $data['dd_name'] = input('topic');
            $data['dd_describe'] = input('describe');
            $data['dd_status'] = input('state') == 'on' ? 1 : 2;
            $data['dd_id'] = input('id');

            (new DutyValidate())->goCheck($data);
            $actionList = input('actions/a') ? input('actions/a') : []; //获取传递过来的所有行为

            $memberAction = collection(DutyAction::getDutyActionList($data['dd_id']))->toArray();  //获取该职责所有的行为
            $memberAction = array_column($memberAction, 'da_action_id');//只要对应行为id 单独提取出来
            //需要新增的行为
            //拿传递过来的所有行为跟改角色目前所拥有的行为比较差集 如果存在 就说明要新增
            $addActionList = array_diff($actionList, $memberAction);
            //需要删除的行为
            //拿改角色目前所有的行为，跟传递过来的所有行为比较差集 如果存在值 就是要删除
            $delActionList = array_diff($memberAction, $actionList);
            Db::startTrans();  //开启事物
            try {
                $dutyResult = DutyData::update($data); //修改角色
                if (!empty($addActionList)) {
                    //如果有需要新增行为
                    $addActionData = [];
                    foreach ($addActionList as $key => $v) {
                        $addActionData[$key]['da_action_id'] = $v;
                        $addActionData[$key]['da_duty_id'] = $data['dd_id'];;
                    }
                    $dutyActionResult = model('DutyAction')->saveAll($addActionData);
                }
                if (!empty($delActionList)) {
                    //如果有需要删除行为
                    foreach ($delActionList as $v) {
                        $delData['da_action_id'] = $v;
                        $delData['da_duty_id'] = $data['dd_id'];
                        $dutyActionResult = DutyAction::get($delData)->delete();
                    }
                }
                Db::commit();

                if ($dutyResult) {
                    CusLog::writeLog($this->User['am_id'], '修改角色');
                    return $this->ajaxShow(true, '修改成功');
                } else {
                    return $this->ajaxShow(false, '修改失败');
                }

            } catch (\Exception $e) {

                Db::rollback();
                return $this->ajaxShow(false, $e->getMessage());
            }
        } else {
            (new IDMustBePositiveInt())->goCheck();
            $id = input('id/d');
            $actionList = DutyData::getDutyActionList($id); //根据获取的角色id查询所有的行为
            $actionList['actionlist'] = implode(',', array_column($actionList['action'], 'da_action_id')); //将所有的行为从数组冲取出
            $this->assign('data', $actionList);

            return $this->fetch();
        }
    }


    /**
     * @url admin\Duty\doDel
     *职责删除方法
     */
    public function doDel($id)
    {

        (new IDMustBePositiveInt())->goCheck();
        if (!$this->_checkAction()) {
            return $this->ajaxShow(false, '无权此操作');
        }
        $dutrData = DutyData::getDutyFind(['dd_id' => $id]);
        if (!$dutrData) {
            return $this->ajaxShow(false, '当前角色已经不存在');
        }
        Db::startTrans();
        try {
            $dutyRs = $dutrData->delete();
            $dutyActionRs = model('DutyAction')->where(['da_id' => $id])->delete();

            Db::commit();
            CusLog::writeLog($this->User['am_id'], '删除了' . $dutrData['dd_name'] . '角色');
            return $this->resultHandle($dutyActionRs);
        } catch (\Exception $e) {
            Db::rollback();
            $this->ajaxShow(false, $e->getMessage());
        }
    }

    public function editStatus($id, $state)
    {
        $this->checkEditDelStatus();
        $data = DutyData::get($id);
        if (!$data) {
            throw new ParameterException([
                'msg' => '此角色已经不存在',
            ]);
        }
        $data->dd_status = $state;
        $UserResult = $data->save();
        if ($UserResult) {
            CusLog::writeLog($this->User['am_id'], '修改了角色' . $id . '状态');
            return $this->ajaxShow(true, '修改成功');
        } else {
            return $this->ajaxShow(false, '修改失败');
        }
    }

    public function getMemberList($id)
    {
        (new IDMustBePositiveInt())->goCheck();
        $admin_list = AdminDuty::with('members')->where(['ad_duty_id' => $id])->select();
        $this->assign('list', $admin_list);
        return $this->fetch();
    }
}