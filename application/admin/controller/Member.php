<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/9/18
 * Time: 15:31
 */

namespace app\admin\controller;

use app\common\lib\Upload;
use app\common\model\AdminDuty;
use app\common\model\DutyData;
use app\common\model\Member as MemberModel;
use app\common\model\MemberModular;
use app\common\validate\IDMustBePositiveInt;
use app\common\validate\MemberValidate;
use custom\CusLog;
use think\Db;


/**
 * Class Member
 * @package app\admin\controller
 * 管理员控制器
 */
class Member extends Base
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $dutyList = DutyData::all();
        $this->assign('dutyList',$dutyList);
    }

    protected $beforeActionList = [
        '_checkLogin' => ['except'=>'toEditPass'],
        '_checkSupre' => ['only'=>'toEditPass'],
    ];

    /**
     * @url admin/Member/toList
     * 管理员列表
     */
    public function toList(){

        $seach = input('phone');
        $where = [];
        $where['am_phone'] =    !empty($seach) ?  $seach : '';
        $memberList = MemberModel::findByPage($where);
        $this->assign('MemberList',$memberList);
        $this->assign('empty',$seach);
        return $this->fetch();
    }


    /**
     * @url admin/Member/doAdd
     * 管理员添加方法
     */
    public function doAdd(){
        if( $this->request->isPost() )
        {
            if(!$this->_checkAction()){
                return $this->ajaxShow(false,'无权此操作');
            }
            $data['am_nickname'] = input('nickname');
            $data['am_phone'] = input('phone');
            $data['am_email'] = input('email');
            $data['am_password'] = md5(input('password'));
            $data['am_edit_me'] = input('editMe')?input('editMe'):2;
            $data['am_status'] = input('status')?input('status'):2;
            //接受管理员身份
            $dutyList = input('duty/a');
            //验证数据
            (new MemberValidate())->goCheck($data);
            //查询该邮箱是否存在
            $memberResult = MemberModel::getMemberByPhone($data['am_phone']);
            if(!$memberResult){
                Db::startTrans();
                try{
                    //如果不存在 新增数据
                    $result = MemberModel::create($data);
                    //添加管理员身份添加
                    if( !empty($dutyList)){
                        $dutyData=[];
                        foreach ($dutyList as $key=>$val){
                            $dutyData[$key]['ad_user_id'] = $result->am_id;
                            $dutyData[$key]['ad_duty_id'] = $val;
                        }
                        model('AdminDuty')->saveAll($dutyData);
                    }
                    // 提交事务
                    Db::commit();
                    if( $result ){
                        CusLog::writeLog($this->User['am_id'],'添加管理员');
                        return $this->ajaxShow(true,'添加成功');
                    }else{
                        return $this->ajaxShow(false,'添加失败');
                    }

                } catch (\Exception $e) {
                    // 回滚事务
                    return $this->ajaxShow( false,$e->getMessage());
                    Db::rollback();
                }

            }else{
                return $this->ajaxShow(false,'该手机已经注册');
            }
        }else{
            return $this->fetch();
        }

    }



    public function toEditPass($id){
        $this->assign('uid',$id);
        return $this->fetch();
    }

    public function doEditPass(){
        $data['am_id'] = input('uid');
        $memberData = MemberModel::getMemberById($data['am_id']);
        if($memberData){
            $data['am_password'] = md5(input('password'));
            $memberRs = MemberModel::update($data);
            CusLog::writeLog($this->User['am_id'],'修改了'.$memberData['am_nickname'].'密码');
            return $this->resultHandle($memberRs);
        }else{
            return show(false,'该管理员已经不存在');
        }
    }
    /**
     * @url admin/Member/toEdit
     * 管理员修改页面
     */

    public function toEdit($id){
        //查询数据
        $memberData = MemberModel::getMemberById($id)->toArray();
        //查找该该管理员管理模块 管局管理员ID
        $modularData = MemberModular::all([ 'mid'=>$id ]);
        //对管理员所有职责转字符串处理
        $memberData['admin_duty_s'] = implode(',',array_column( $memberData['admin_duty_s'],'ad_duty_id'));
        $this->assign('memberData',$memberData);
        $this->assign( 'modularData', implode(',',array_column( $modularData,'sid')));
        return $this->fetch();
    }


    /**
     * @url admin/Member/doEdit
     * 管理员修改方法
     */
    public function doEdit(){
        if( $this->request->isPost() )
        {
            if(!$this->_checkAction()){
                return $this->ajaxShow(false,'无权此操作');
            }
            $data['am_nickname'] = input('post.nickname');
            $data['am_phone'] = input('post.phone');
            $data['am_email'] = input('post.email');
            $data['am_id'] = input('post.id');
            //验证数据
            $dutyList = input('duty/a');

            //验证数据
            (new MemberValidate())->goCheck($data);
            //查询该邮箱是否存在
            $memberDutyList = AdminDuty::getDutyListByMemberId($data['am_id']);

            $memberDutyList = array_column($memberDutyList,'ad_duty_id');

            //确定需要增加的身份
            $newDutyList = array_diff($dutyList,$memberDutyList);
            //确定需要删除的身份
            $delDutyList = array_diff($memberDutyList,$dutyList);
            Db::startTrans();
            try{
                $result = MemberModel::update($data);
                if( !empty($newDutyList)){
                    $dutyData=[];
                    foreach ($newDutyList as $key=>$val){
                        $dutyData[$key]['ad_user_id'] = $result->am_id;
                        $dutyData[$key]['ad_duty_id'] = $val;
                    }
                    model('AdminDuty')->saveAll($dutyData);
                }
                if(!empty($delDutyList)){
                    //需要删除的
                    $dutyData=[];
                    foreach ($delDutyList as $key=>$val){
                        $dutyData['ad_user_id'] = $result->am_id;
                        $dutyData['ad_duty_id'] = $val;
                        model('AdminDuty')->where($dutyData)->delete();
                    }
                }
                // 提交事务
                Db::commit();
                if( $result ){
                    CusLog::writeLog($this->User['am_id'],'修改了 <a style="color:red;">'.$data['am_nickname'].' </a> 管理员');
                    return $this->ajaxShow(true,'修改成功');
                }else{
                    return $this->ajaxShow(false,'修改失败');
                }

            } catch (\Exception $e) {
                // 回滚事务
                Db::rollback();
                return $this->ajaxShow( false,$e->getMessage());
            }
        }else{
            new IDMustBePositiveInt();
            $id = input('id/d');
            $memberData = MemberModel::getMemberById($id);
            //对管理员所有职责转字符串处理
            $memberData['admin_duty_s'] = implode(',',array_column( $memberData['admin_duty_s'],'ad_duty_id'));
            $this->assign('data',$memberData);
            return $this->fetch();
        }

    }


    //停用管理员方法
    public function editStatus( $id, $state=1 ){
        if(!$this->_checkAction()){
            return $this->ajaxShow(false,'无权此操作');
        }

        $MemberData = MemberModel::get($id);

        if(empty($MemberData) )
        {
            return $this->ajaxShow(false,'管理员已不存在');
        }

        $data = ['am_id'=>$id,'am_status'=>$state]; //获取所有的参数
            $MenberResult = MemberModel::update($data);
            if($MenberResult){
                CusLog::writeLog($this->User['am_id'],'修改了管理员'.$MemberData['am_nickname'].'状态');
                return $this->ajaxShow(true,'修改成功');
            }else{
                return $this->ajaxShow(false,'修改失败');
            }
    }

    //修改资料方法
    public function editInfo()
    {
        if($this->request->isPost())
        {

        }
        else{
            $this->assign('data', $this->User);
            return $this->fetch();
        }
    }


    public function editLogo()
    {
        $src = Upload::image();
        if($src)
        {
            $data = MemberModel::get($this->User['am_id']);
            $data->am_logo = $src;
            $result = $data->save();
            session('User.am_logo',$src);
            $data = [
                'code' => 0,
                'msg' => '上传成功',
                'data' => [
                    'src' => $src
                ]
            ];
            return json($data);
        }
    }

    //删除管理员
    public function doDel($id){
        if(!$this->_checkAction()){
            return $this->ajaxShow(false,'无权此操作');
        }
        (new IDMustBePositiveInt())->goCheck();
        $memberRs = MemberModel::getMemberById($id);
        if( !$memberRs ){
            return $this->ajaxShow(false,'当前管理员已经不存在');
        }
        Db::startTrans();
        try{
            $memberResult = $memberRs->delete();
            CusLog::writeLog($this->User['am_id'],'删除了 <a style="color:red;"> '.$memberRs['am_nickname'].' </a>管理员');
            Db::commit();
            return $this->resultHandle($memberResult);
        }catch (\Exception $e){
            Db::rollback();
            $this->ajaxShow( false,$e->getMessage());
        }
    }

    public function goOut()
    {
        session(null);
        $this->success('退出成功', 'admin/Login/index');
    }
}