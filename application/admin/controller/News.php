<?php
/**
 * Created by PhpStorm.
 * User: 李沈阳
 * Date: 2018/1/16
 * Time: 15:10
 */

namespace app\admin\controller;

use app\common\model\Label;
use app\common\model\NewLabel;
use app\common\model\News as NewsModel;
use app\common\model\Sort;
use app\lib\exception\ParameterException;
use custom\CusLog;
use think\Db;

/**
 * Class News
 * @package app\admin\controller
 * 资讯控制器
 */
class News extends Base
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->assign('hotLabel', Label::getHotLabel()); //获取最热标签
        $sort = Sort::all(['pid' => 0]);
        $this->assign('sort', $sort);  // 获取所有一级分类
        $this->assign('twoSort', Sort::all(['pid' => $sort[0]['id']])); //添加所有二级分类
    }


    //列表显示
    public function toList()
    {
        $page = NewsModel::getPage([], 10);
        $this->assign('page', $page);
        return $this->fetch();
    }


    //添加
    public function doAdd()
    {
        if ($this->request->isPost()) {
            //组合数据
            $data['title']      = input('post.title');  //标题
            $data['order']      = input('post.order');  //顺序
            $data['sm_title']   = input('post.sm_title');
            $data['message']    = input('post.sm_title');
            $data['is_index']   = input('post.is_index');   //是否首页展示
            $data['is_comment'] = input('post.is_comment');   //是否可以评论
            $data['is_top']     = input('post.is_top');   //是否置顶
            $data['source']     = input('post.source');   //内容来源
            $data['mid']        = $this->User['am_id'];   //作者
            $data['sort_id']    = input('post.sort_id');   //分类
            $data['one_sort']    = input('post.one_sort');   //一级分类
            $data['sm_img']         = input('post.sm_img');
            $data['content']         = input('post.content');
            $label = input('post.label');
            //去除标签最后一个,
            $label = trim($label, ',');
            $labelArr = explode(',', $label);

            Db::startTrans();
            try {
                $newResult = NewsModel::create($data);
                if (!empty($label)) {
                    //前台传递过来的值 是一个以,号分割的字符串

                    $labeldIDS = [];
                    foreach ($labelArr as $key => $lab) {
                        $label = Label::find(['name' => $lab ]);
                        //如果我没有添加过这个标签
                        if (!$label) {
                            //添加标签 将心标签的id存起来 存入中间表
                            $labelCreateData['name'] = $lab;
                            $labelCreateData['mid'] = $this->User['am_id'];
                            $labelResult = Label::create($labelCreateData);
                            //将新添加的标签添加到标签ID集合中
                            array_push($labeldIDS, $labelResult->id);
                        }
                        //如果该标签存在的话，就将现有的标签ID存入标签集合当中
                        array_push($labeldIDS, $label->id);
                        //组合中新闻和标签的中间表
                        $newLabelData[$key]['label'] = $lab;
                        $newLabelData[$key]['new_id'] = $newResult->id;
                    }
                    $newLabelModel = new NewLabel();
                    $newLabelModel->saveAll($newLabelData);
                }
                CusLog::writeLog( $this->User['am_id'], '发布了 <span style="color:red; font-weight: bold;">'.$data['title'].' </span> 资讯');
                Db::commit();
                return $this->resultHandle($newResult);
            } catch (\Exception $e) {
                Db::rollback();
                return show( false, $e->getMessage() );
            }
        } else {
            return $this->fetch();
        }
    }

    //修改
    public function doEdit()
    {
        if ($this->request->isPost()) {

        } else {
            (new IDMustBePositiveInt())->goCheck();
            $id = input('id/d');
            $data = NewsModel::get($id);
            $this->assign('data', $data);
            return $this->fetch();
        }
    }

    //删除
    public function doDel($id)
    {
        (new IDMustBePositiveInt())->goCheck();
        $data = NewsModel::get(['id' => $id]);
        if (!$data) {
            throw new ParameterException();
        }
        try {
            $result = $data->delete();
            CusLog::writeLog($this->User['am_id'], '删除了 <a class="c-red">' . $data->title . '</a>Banner');
            return $this->resultHandle($result);
        } catch (\Exception $e) {
            return show(false, $e->getMessage());
        }
    }


    //修改状态
    public function editStatus($id, $state)
    {
        (new IDMustBePositiveInt())->goCheck();
        $data = NewsModel::get(['id' => $id]);
        if (!$data) {
            throw new ParameterException();
        }
        $content = $state == 1 ? '启用了 -' . $data->title . '- Banner' : '停用了 - <a class="c-red">' . $data->title . '-</a> Banner';
        try {
            $data->status = $state;
            $result = $data->save();
            CusLog::writeLog($this->User['am_id'], $content);
            return $this->resultHandle($result);
        } catch (\Exception $e) {
            return show(false, $e->getMessage());
        }
    }

    //修改排序
    public function editOrder($id, $order)
    {
        (new IDMustBePositiveInt())->goCheck();
        $data = NewsModel::get(['id' => $id]);
        if (!$data) {
            return show(false, '该Banner已经不存在了...');
        }
        try {
            $data->order = $order;
            $result = $data->save();
            CusLog::writeLog($this->User['am_id'], '修改了 <a class="c-red">' . $data->title . '</a>排序,结果为' . $order);
            return $this->resultHandle($result);
        } catch (\Exception $e) {
            return show(false, $e->getMessage());
        }
    }


    public function doDels($ids = [])
    {
        if (empty($ids)) {
            return show(false, '选中数据为空');
        }
        try {
            $str_ids = implode(',', $ids);
            $result = NewsModel::destroy($str_ids);
            return $this->resultHandle($result);
        } catch (\Exception $e) {
            return show(false, $e->getMessage());
        }
    }


}