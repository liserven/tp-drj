<?php
/**
 * Created by PhpStorm.
 * User: 李沈阳
 * Date: 2017/11/22
 * Time: 9:27
 */

namespace app\admin\controller;

use app\common\model\BuildingOrder;
use app\common\model\BuildingOrderDetail;
use app\common\model\UserNotices;
use app\common\validate\IDMustBePositiveInt;
use app\lib\exception\OrderException;
use app\lib\exception\ParameterException;
use enum\BuildingOrderStatus;
use think\Db;
use think\Exception;
use app\api\controller\v1\KdNiao;

class Orbuilding extends Base
{


    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

    }

    //订单列表
    public function tolist()
    {
        $phone = input('phone');
        $where=[];
        if ($phone) {
            $where['ud_phone'] = $phone;
        }
        $page = db('building_order_detail')
            ->alias('bod')
            ->join('__USER_DATA__ ud', 'ud.ud_id=bod.uid', 'left')
            ->where($where)
            ->field('bod.*, ud.ud_name as uid, ud.ud_phone')
            ->order('id', 'desc')
            ->paginate('15');
//        ->each(function($item,$key){
//            if (is_array($item) && !empty($item)) {
//                $phone = input('phone');
//                $where = [
//                   'ud_id' =>  $item['uid']
//                ];
//                if( $phone )
//                {
//                    $where['ud_phone'] = $phone;
//                }
//                    $list = db('user_data')->where($where)->find();
//                    $item['uid'] = $list['ud_name'];
//                    return $item;
//            }
//        });
        $this->assign('page', $page);
        return $this->fetch();
    }

    public function logistics($id)
    {

        if ($this->request->isPost()) {
            if (!$this->_checkAction()) {
                return $this->ajaxShow(false, '无权此操作');
            }
            $list = BuildingOrderDetail::get(input('post.id/d'));
            $res  = BuildingOrder::get(input('post.id/d'));
            if (!$list) {
                throw new OrderException();
            }
            Db::startTrans();
            try {
                if( empty($list['logistics']))
                {
                    //填完运单号像用户发送配送通知
                    $messagelist['img'] = $list['g_img'];
                    $messagelist['user_id'] = $list['uid'];
                    $messagelist['topic'] = '发货通知';
                    $messagelist['type'] = 2;
                    $messagelist['content'] = '您的宝贝正在快马加鞭得向您赶来';

                    UserNotices::create($messagelist);
                }
                $a = input('logustics');
                $b = input('logustics_code');
                //添加运单号与物流公司
                $list->express_code = $b;
                $list->logistics = $a;
                if (!$a || !$b) {
                    throw new ParameterException();
                }
                //更改状态为发货
                $list->status = BuildingOrderStatus::TRANSLATE;
                $res ->status = BuildingOrderStatus::TRANSLATE;
                $result = $list->save();
                Db::commit();
                return show( true, 'ok');
            } catch (\Exception $e) {
                Db::rollback();
                return show(false, $e->getMessage());
            }
        } else {
            //填写运单号
            $id = $id;


            $page = Db::table('express_code')->select();
            $list = BuildingOrderDetail::get($id);
            $this->assign([
                'page' => $page,
                'id' => $id,
                'list'=>$list
            ]);

            return view();
        }
    }

    public function detail($id)
    {
        //显示详情
        $id = input('id');

        $list = Db::table('building_order_detail')->where('id', $id)->find();
        $page = Db::table('user_delivery')->where('id', $list['u_address_id'])->find();
        $this->assign([
            'list' => $list,
            'page' => $page
        ]);
        return view();


    }

    //修改运单号
    public function details($id)
    {
        (new IDMustBePositiveInt())->goCheck();
        if ($this->request->isPost()) {
            if (!$this->_checkAction()) {
                return $this->ajaxShow(false, '无权此操作');
            }
            Db::startTrans();
            try {
                $data = Db::table('building_order_detail')->update(['id' => $id, 'logistics' => input('logustics'), 'express_code' => input('express_code')]);
                return $this->resultHandle($data);
            } catch (\Exception $e) {
                Db::rollback();
                return show(false, $e->getMessage());
            }
        } else {
            $id = $id;
            $page = Db::table('express_code')->select();
            $list = BuildingOrderDetail::get($id);
            $this->assign([
                'page' => $page,
                'id' => $id,
                'list' => $list
            ]);

            return view();
        }
    }
}

