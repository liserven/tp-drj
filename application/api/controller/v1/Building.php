<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/2/23
 * Time: 18:48
 */

namespace app\api\controller\v1;
use app\common\model\BuildingDetails;
use app\common\model\BuildingImg;
use app\common\model\BuildingScreen;
use app\common\service\BuildingService;
use app\common\service\ShoppingCartServer;
use app\common\validate\IDMustBePositiveInt;
use app\lib\exception\BuildingException;
use app\lib\exception\ParameterException;
use think\Build;
use think\Db;

/**
 * Class Building
 * @package app\api\controller\v1
 * 建材控制器
 */
class Building extends Base
{


    //初始化父类构造方法
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    protected $beforeActionList = [
        //验证登陆
        'checkLogin' => [ 'only' => 'buildingCollection,addShoppingCart,delShoppingCart,getShoppingCart' ],
        //验证id参数必须
        'checkIDMustBePositiveInt' => [ 'only' => 'buildingCollection' ],
    ];


    //获取建材列表
    public function getBuildingList()
    {
        //全部列表和分类查询列是一个方法 如是有查询条件就是条件查询，如果没有就是全部列表查询
        $oneType = input('get.one_type');
        $twoType = input('get.two_type');
        $name = input('name');
        $where= []; //用于条件查询数据
        if(!empty($oneType)) $where['bd.g_column'] = $oneType;
        if(!empty($twoType)) $where['bd.g_columr'] = $twoType;
        if(!empty($name)) $where['bd.g_name'] = [ 'LIKE', '%'.$name.'%'];
        $limit = input('limit') ? input('limit') : 10;
        //组织好查询条件
        $list = BuildingDetails::getListByWhere($where, $limit);
        if($list->isEmpty())
        {
            throw new BuildingException([
                'msg' => '暂无商品',
                'errorCode'=> 90004
            ]);
        }
        return show(true, 'ok', $list);
    }


    //根据建材id获取详情
    public function getBuildingDetailById($id)
    {
        (new IDMustBePositiveInt())->goCheck();
        $data =  Db::table('building_details')->where([ 'id'=> $id])
            ->field('id,g_name,g_price_r,g_price,g_material,g_img,stock')->find();
        if( !$data)
        {
            throw new BuildingException([
                'msg'=> '未找到该商品'
            ]);
        }
        $this->checkLogins();
        if( empty($this->user))
        {
            //如果为空说明未登录
            $is_collection = 2;
        }
        else{
            //说明登录
            $collection = db('building_collection')->where([ 'u_id'=> $this->user['ud_id'], 'bu_id'=> $data['id']])->find();
            $is_collection = empty($collection) ? 2 : 1;
        }
        $data['is_collection'] = $is_collection;
        $data['color'] = Db::table('building_screen')->where([ 'gid'=> $id])->field('id,img,size,stock,price,g_name')->order(['order'=>'asc'])->select();
        $data['head_img'] = Db::table('building_img')->where([ 'g_id'=> $id, 'g_img_type'=>1 ])->field('id,g_id,g_img,g_img_type')->select();
        $data['bottom_img'] = Db::table('building_img')->where([ 'g_id'=> $id, 'g_img_type'=>2]  )->field('id,g_id,g_img,g_img_type')->select();
        $data['deploy'] = Db::table('building_customer')->where([ 'gid'=> $id ]  )->field('id,cus_name, img')->select();
        $data['set'] = Db::table('building_set')->where([ 'gid'=> $id])->field('set_name, value')->order(['order'=> 'asc'])
            ->select();
        $data['share_url'] = config('app.root_url').'/share/building?id='.$data['id'];
        if(empty($data))
        {
            throw new BuildingException();
        }
        return show(true, 'ok',$data );

    }

    /**
     *建材收藏
     */
    public function buildingCollection($id)
    {
        //首先判断是否是添加收藏，如果存在该收藏，是取消收藏，如果没有就是添加收藏
        $result = (new BuildingService())->setBuildingCollection($this->user['ud_id'], $id);
        return $result;
    }


    /*
     * 建材添加购物车
     * */
    public function addShoppingCart()
    {
        $buildingId = input('post.building_id');
        $typeId = input('post.type_id');
        $num = input('post.num');
        if( !$buildingId || !$typeId || !$num )
        {
            throw new ParameterException([
                'msg' => '参数错误'
            ]);
        }
        $shoppingServer = new ShoppingCartServer($this->user['ud_id']);
        $result = $shoppingServer->setShoppingCartAdd($buildingId, $num, $typeId);
        return $this->resultHandle($result);
    }

    //删除建材购物车
    public function delShoppingCart($ids)
    {
        $shoppingServer = new ShoppingCartServer($this->user['ud_id']);
        return $this->resultHandle($shoppingServer->deleteShoppingCart($ids));
    }



    public function getShoppingCart()
    {
        $shoppingServer = new ShoppingCartServer($this->user['ud_id']);
        return show(true, 'ok', $shoppingServer->findCart());
    }





}