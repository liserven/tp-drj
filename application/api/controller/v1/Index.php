<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/2/23
 * Time: 18:47
 */

namespace app\api\controller\v1;

use app\common\model\BuildingDetails;
use app\common\model\BuildingOrder;
use app\common\model\ChatData;
use app\common\model\City;
use app\common\model\County;
use app\common\model\UserData;
use app\common\model\VillaData;
use app\common\service\UserToken;
use app\lib\exception\BuildingException;
use app\lib\exception\ParameterException;
use app\lib\exception\PartnerException;
use app\lib\exception\VillaException;
use enum\PartnerUserStatus;
use think\Cache;
use think\Db;

/**
 * Class Index
 * @package app\api\controller\v1
 * 首页接口
 *
 */
class Index extends Base
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    protected $beforeActionList = [
        //前置操作，验证用户权限，必须是合伙才有权限访问
        'checkPartner' => ['only'=> 'getChatList'],
        //验证登陆
        'checkLogin' => [ 'only'=> ''],
    ];

    //获取首页消息列表 合伙人页面
    public function getChatList()
    {
        $chats = ChatData::getChatListByPatnerId($this->user['ud_id']);
        return show( true, "ok", $chats);
    }


    //非合伙人进入之后获取县级的合伙人列表
    public function getPartnerList()
    {
        $limit = $this->getLimit();
        /**
         *
         * 如果是费登录用户 肯定是搜索合伙人的
         * 如果是合伙人就是搜索用户
         *
         *
         */
        $type = 2;
        $this->checkLogins();
        if (!empty($this->user)) {
            if ($this->user['type'] == 2) {
                //为1是搜索用户
                $type = 1;
            }
        }
        if( $type == 2 )
        {
            $county = input('county');
            $city = input('city');
            if( empty($county) && empty($city))
            {
                throw new ParameterException([
                    'msg' => '地区必须填写一个'
                ]);
            }
            //如果为2就是搜索合伙人
            if($this->user)
            {
                //如果是登录用户  先查看是否有绑定合伙人
                $partner_data = Db::table('partner_user')->alias('pu')->where(['pu_user_id'=> $this->user['ud_id']])
                    ->join('__USER_DATA__ ud', 'pu.pu_partner_id=ud.ud_id', 'left')
                    ->field('ud.ud_name, ud.ud_phone, ud.ud_logo, ud.ud_sex, ud.city, ud.province, ud.county, ud.town,
                     ud.status,ud.ud_id')
                    ->paginate(10);
            }
            else{
                $partner_data = UserData::getCityPartner([ 'ud.county'=> $county], $limit);
                if( $partner_data->isEmpty() )
                {
                    $partner_data = UserData::getCityPartner([ 'ud.city'=> $city], $limit);
                }
            }

                //如果没有绑定合伙人
            $partner_data = $partner_data->toArray();
            foreach ($partner_data['data'] as $key=>&$partner)
            {
                $star = Db::table('partner_star')->where([ 'pid'=> $partner['ud_id']])->avg('star');
                $partner['star'] = $star <= 0 ? 5 : $star;
                $partner['deal'] = Db::table('partner_user')->where([ 'pu_partner_id'=>$partner['ud_id'], 'status'=> PartnerUserStatus::SIGN])->count();
                $partner['comm'] = 999;
                $partner['share_url'] = 'http://www.61drhome.cn/share/card?id='.$partner['ud_id'];
                $partner['likes'] = Db::table('partner_laud')->where(['pid'=> $partner['ud_id']])->count();
            }
        }
        else{
            //搜用公海用户
            $partner_data = Db::table('seas')->alias('s')->where( [ 'ud.county'=> $this->user['county'], 'ud.type'=> 1, 'ud.status'=> 1])->
                join('__USER_DATA__ ud', 'ud.ud_id=s.uid', 'left')
                ->group('ud.ud_id')
                ->field('ud.ud_name, ud.ud_phone, ud.ud_logo, ud.ud_sex, ud.city, ud.province, ud.county, ud.town,
                     ud.status,ud.ud_id')->paginate($limit);
            if( $partner_data->isEmpty() )
            {
                $partner_data = Db::table('seas')->alias('s')->where( [ 'ud.city'=> $this->user['city'], 'ud.type'=> 1, 'ud.status'=> 1])->
                join('__USER_DATA__ ud', 'ud.ud_id=s.uid', 'left')
                    ->group('ud.ud_id')
                    ->field('ud.ud_name, ud.ud_phone, ud.ud_logo, ud.ud_sex, ud.city, ud.province, ud.county, ud.town,
                     ud.status,ud.ud_id')->paginate($limit);
            }
        }
        if( empty($partner_data['data']) )
        {
            throw new PartnerException();
        }
        return show( true, 'ok', $partner_data);
    }

    //非合伙人进入之后获取县级的合伙人列表  随机
    public function getPartnerListRand()
    {
        $count = UserData::where(['type'=>2, 'status'=>1 ])->count();
        $limit = $count-8>0 ? $count-8 : 0;
        $result = City::getPartnerByRand($limit, 8);
        return show(true, 'ok', $result);
    }


    //首页推荐别墅
    public function indexRecommendVillaDz()
    {
        $data = VillaData::indexVilla([ 'vd_class'=> '定制别墅']);
        return show(true, 'ok', $data);
    }

    //首页推荐别墅
    public function indexRecommendVillaBz()
    {
        $data = VillaData::indexVilla([ 'vd_class'=> '标准别墅']);
        return show(true, 'ok', $data);
    }

    //首页推荐建材
    public function indexRecommendBuilding()
    {

        $data = BuildingDetails::getIndex();
        return show(true, 'ok', $data);
    }


    //搜索接口
    public function search($content)
    {
        $limit = $this->getLimit();
        $building = BuildingDetails::where([ 'g_name'=> [ 'LIKE', '%'.$content.'%'], 'status'=> 1])->paginate($limit);

        $dzVilla = VillaData::where([ 'vd_name'=> [ 'LIKE', '%'.$content.'%'], 'vd_class'=> '定制别墅', 'status'=>1 ])->paginate($limit); //定制别墅
        $bzVilla = VillaData::where([ 'vd_name'=> [ 'LIKE', '%'.$content.'%'], 'vd_class'=> '标准别墅' , 'status'=> 1])->paginate($limit); //标准别墅

        $this->checkLogins();
        if( $this->user )
        {
            foreach ( $building->toArray()['data'] as $key=>&$val){
                $isCollection = Db::table('building_collection')->where(['u_id'=> $this->user['ud_id'], 'bu_id'=> $val['id']])->find();
                $building[$key]['is_collection'] = $isCollection ? 1 : 2;
            }
            foreach ( $dzVilla->toArray()['data'] as $key=>&$val){
                $isCollection = Db::table('villa_collection')->where(['vc_user_id'=> $this->user['ud_id'], 'vc_villa_id'=> $val['id']])->find();
                $dzVilla[$key]['is_collection'] = $isCollection ? 1 : 2;
            }
            foreach ( $bzVilla->toArray()['data'] as $key=>&$val){
                $isCollection = Db::table('villa_collection')->where(['vc_user_id'=> $this->user['ud_id'], 'vc_villa_id'=> $val['id']])->find();
                $bzVilla[$key]['is_collection'] = $isCollection ? 1 : 2;
            }
        }
        else{
            foreach ( $building->toArray()['data'] as $key=>&$val){
                $building[$key]['is_collection'] = 2;
            }
            foreach ( $dzVilla->toArray()['data'] as $key=>&$val){
                $dzVilla[$key]['is_collection'] =  2;
            }
            foreach ( $bzVilla->toArray()['data'] as $key=>&$val){
                $bzVilla[$key]['is_collection'] =  2;
            }
        }
        if( $building->isEmpty() && $dzVilla->isEmpty() && $bzVilla->isEmpty()  )
        {
            throw new BuildingException([
                'msg'=>'未找到任何数据'
            ]);
        }
        $data = [
            'dz_villa' => $dzVilla,
            'bz_villa'=> $bzVilla,
            'building'=> $building
        ];

        return show( true, 'ok', $data);

    }
}