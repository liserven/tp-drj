<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/4/19
 * Time: 17:22
 */

namespace app\api\controller\v1;


use app\common\lib\Upload;
use app\common\model\UserNotices;
use app\common\model\VillaData;
use app\common\model\VillaOrder;
use app\common\validate\IDMustBePositiveInt;
use app\lib\exception\ParameterException;
use app\lib\exception\PartnerException;
use enum\PartnerUserStatus;
use app\common\model\PartnerUser as PartnerUserModel;
use think\Db;

class PartnerUser extends Base
{


    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }


    protected $beforeActionList = [
        //前置操作，验证用户权限，必须是合伙才有权限访问
        'checkPartner' => ['only' => 'editPartnerUserStatus'],
    ];

    //修改别墅订单状态
    public function editPartnerUserStatus()
    {

        /**
         * 如果是签约状态下的id可以为空，但是user_id不能为空
         *
         *
         */
        $id = input('id');  //订单id
        $userId = input('user_id');  //用户id
        if (!$id && !$userId) {
            throw new ParameterException([
                'msg' => '参数错误'
            ]);
        }
        $partnerUserData = db('partner_user')->where(['pu_partner_id' => $this->user['ud_id'], 'pu_user_id' => $userId])->find();
        $user = db('user_data')->where(['ud_id' => $id])->find();
        if (!$partnerUserData) {
            throw new PartnerException([
                'msg' => '该用户不是你的客户'
            ]);
        }

        $status = input('status');
        if (!$status) {
            throw new  PartnerException([
                'msg' => '无修改'
            ]);
        }
        if ($status == PartnerUserStatus::SIGN) //如果是签约的话
        {
            if ($partnerUserData['status'] == 1) {
                throw new PartnerException([
                    'msg' => '您跟用户之间还没有绑定,无需签约',
                    'errorCode' => 140003
                ]);
            }

            if ($partnerUserData['status'] >= PartnerUserStatus::SIGN) {
                throw new PartnerException([
                    'msg' => '他已经是你的客户无需签约'
                ]);
            }
            if ($this->request->file()) {
                $contract = Upload::image();
            }
            $villaId = input('villa_id'); //获取别墅id
            $userName = input('user_name'); //客户名字
            $phone = input('phone'); //客户手机
            $address = input('address'); //详细地址
            //获取省市县镇
            $provice = input('provice');
            $city = input('city');
            $county = input('county');
            $town = input('town');
            $villa = VillaData::get($villaId);
            if (!$villa) {
                throw new PartnerException([
                    'msg' => '该别墅不存在'
                ]);
            }

            Db::startTrans();
            try {
                //更新当前状态
                db('partner_user')->where(['pu_partner_id' => $this->user['ud_id'], 'pu_user_id' => $userId])->update(['status' => PartnerUserStatus::SIGN]);
                $reds = db('grab_red')->where(['phone' => $user['ud_phone'], 'partner_id' => $this->user['ud_id'], 'status' => 2])->find();  //查看是否有是用过的红包
                if ($reds) {
                    $is_reds = 1;
                    $reds_money = $reds['money'];
                } else {
                    $is_reds = 2;
                    $reds_money = 0.00;
                }

                $villaData = [
                    'order_id' => makeOrderNo(),
                    'partner_id' => $partnerUserData['pu_partner_id'],
                    'user_id' => $partnerUserData['pu_user_id'],
                    'villa_name' => $villa['vd_name'],
                    'villa_img' => $villa['vd_logo'],
//                    'contract'=> $contract,
                    'villa_type' => $villa['vd_class'] == 1 ? '定制别墅' : '私人定制',
                    'city' => $city,
                    'provice' => $provice,
                    'county' => $county,
                    'town' => $town,
                    'address' => $address,
                    'user_phone' => $phone,
                    'user_name' => $userName,
                    'is_reds' => $is_reds,
                    'red_money' => $reds_money
                ];
                $villaOrderResult = VillaOrder::create($villaData);
                $villaOrderDetailData = [
                    'order_id' => $villaOrderResult['id'],
                    'status' => '签订合同',
                    'create_at' => time()
                ];
                UserNotices::create([
                    'user_id' => $partnerUserData['pu_user_id'],
                    'topic' => '签约通知',
                    'content' => '您已经与您的合伙人签约,定荣家竭力为您服务',
                    'type' => 1,
                ]);
                Db::table('villa_order_detail')->insert($villaOrderDetailData);
                Db::commit();
                return show(true, 'ok', []);
            } catch (\Exception $e) {
                Db::rollback();
                throw new ParameterException([
                    'msg' => $e->getMessage()
                ]);
            }
        }

        if ($status == PartnerUserStatus::END) {
            if ($partnerUserData['status'] != PartnerUserStatus::CONSTRUCTION) {
                throw new PartnerException([
                    'msg' => '该订单还未开始建设，不能完工'
                ]);
            }
            Db::startTrans();
            try {
                //如果是完工
                UserNotices::create([
                    'user_id' => $partnerUserData['pu_user_id'],
                    'topic' => '完工通知',
                    'content' => '您的合伙人认为别墅已经完成最后阶段，可以完工',
                    'type' => 3,
                ]);
                $villaOrderDetailData = [
                    'order_id' => $villaOrderResult['id'],
                    'status' => '签订合同',
                    'create_at' => time()
                ];
                Db::table('villa_order_detail')->insert($villaOrderDetailData);
                Db::table(['partner_user'])->where(['pu_partner_id' => $this->user['ud_id'], 'pu_user_id' => $userId])->update(['status' => PartnerUserStatus::END]);
                $villaOrder = VillaOrder::get(['user_id' => $partnerUserData['pu_user_id'],
                    'partner_id' => $partnerUserData['pu_partner_id']
                ]);
                $villaOrder->status = 3;
                $villaOrder->save();
                Db::commit();
                return show(true, '已通知客户完成');

            } catch (\Exception $e) {
                Db::rollback();
                return show(true, '完工失败!');
            }
        }


        if ($status == PartnerUserStatus::CONSTRUCTION) {
            if ($partnerUserData['status'] != PartnerUserStatus::SIGN) {
                throw new PartnerException([
                    'msg' => '还没有签约或正在施工'
                ]);
            }
            $orderId = input('order_id');
            if (!$orderId) {
                throw new PartnerException([
                    'msg' => '订单id必须'
                ]);
            }
            $villaOrder = VillaOrder::get($orderId);
            if ($villaOrder['user_id'] != $userId || $villaOrder['partner_id'] != $this->user['ud_id']) {
                throw new PartnerException([
                    'msg'=> '该订单不属于您和该用户'
                ]);
            }
            Db::startTrans();
            try {

                Db::table(['partner_user'])->where(['pu_partner_id' => $this->user['ud_id'], 'pu_user_id' => $userId])->update(['status' => PartnerUserStatus::CONSTRUCTION]);
                $villaOrder->status = 2;
                $villaOrder->save();
                $villaOrderDetailData = [
                    'order_id' => $villaOrder['id'] ,
                    'status' => '正在施工',
                    'create_at' => time()
                ];
                UserNotices::create([
                    'user_id' => $partnerUserData['pu_user_id'],
                    'topic' => '施工通知',
                    'content' => '定容家已经开始为您施工。。',
                    'type' => 1,
                ]);
                Db::table('villa_order_detail')->insert($villaOrderDetailData);
                Db::commit();
                return show(true, 'ok', []);
            } catch (\Exception $e) {
                Db::rollback();
                throw new ParameterException([
                    'msg' => $e->getMessage()
                ]);
            }

        }
    }

}